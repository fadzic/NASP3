$(function() {
    after = new drawTree('#after');
    before = new drawTree('#before')

    befor_v = {}
    mujo={}

    //draw(bst.toString());

})
var cache = [];

function censor(key, value) {
    if (typeof value === 'object' && value !== null) {
        if (cache.indexOf(value) !== -1) {
            // Circular reference found, discard key
            return;
        }
        // Store value in our collection
        cache.push(value);
    }
    return value;
}

function addElement(e){
    document.getElementById("label").innerHTML=""

    var id = parseFloat(e);
    var dontCare = new RefBool(false);
    avlT = AVLinsert(id, avlT, dontCare);
    before_v = mujo
    mujo = JSON.stringify(avlT,censor)
    cache = []

    mujo=mujo.replace(/null/gi,"{}")
    mujo=JSON.parse(mujo)


    after.draw(mujo,'#after')
    before.draw(before_v,'#before')


}

function delElement(e){
    document.getElementById("label").innerHTML=""

    var id = parseFloat(e);
    var dontCare = new RefBool(false);
    avlT = AVLdel(id, avlT, dontCare);


    before_v = mujo
    mujo = JSON.stringify(avlT,censor)
    cache = []
    mujo=mujo.replace(/null/gi,"{}")
    mujo=JSON.parse(mujo)

    after.draw(mujo,'#after')
    before.draw(before_v,'#before')

}

function findElement(e){
    var id = parseFloat(e);
    var dontCare = new RefBool(false);
    var found = AVLfind(id, avlT, dontCare);
    if(found){document.getElementById("label").innerHTML="Pronaden!"}
    else{document.getElementById("label").innerHTML="Nije pronaden!"}

}
