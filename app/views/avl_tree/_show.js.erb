$(function() {

    init();
    avl = new AVLTree();

    //draw(bst.toString());

})
var cache = [];

function censor(key, value) {
    if (typeof value === 'object' && value !== null) {
        if (cache.indexOf(value) !== -1) {
            // Circular reference found, discard key
            return;
        }
        // Store value in our collection
        cache.push(value);
    }
    return value;
}

function addElement(e){

    var id = parseFloat(e);
    var dontCare = new RefBool(false);
    avlT = AVLinsert(id, avlT, dontCare);
    console.log(avlT)
    console.log('aaa')

    mujo={}
    mujo = JSON.stringify(avlT,censor)
    cache = []

    mujo=mujo.replace(/null/gi,"{}")
    mujo=JSON.parse(mujo)

    draw(mujo)


}

function delElement(e){

    var id = parseFloat(e);
    var dontCare = new RefBool(false);
    avlT = AVLdel(id, avlT, dontCare);
    console.log(avlT)
    console.log('bbb')


    mujo={}
    mujo = JSON.stringify(avlT,censor)
    cache = []
    mujo=mujo.replace(/null/gi,"{}")
    mujo=JSON.parse(mujo)

    draw(mujo)

}